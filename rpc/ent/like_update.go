// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/account"
	"github.com/suyuan32/simple-admin-core/rpc/ent/like"
	"github.com/suyuan32/simple-admin-core/rpc/ent/post"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
)

// LikeUpdate is the builder for updating Like entities.
type LikeUpdate struct {
	config
	hooks    []Hook
	mutation *LikeMutation
}

// Where appends a list predicates to the LikeUpdate builder.
func (lu *LikeUpdate) Where(ps ...predicate.Like) *LikeUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetUpdatedAt sets the "updated_at" field.
func (lu *LikeUpdate) SetUpdatedAt(t time.Time) *LikeUpdate {
	lu.mutation.SetUpdatedAt(t)
	return lu
}

// SetStatus sets the "status" field.
func (lu *LikeUpdate) SetStatus(u uint8) *LikeUpdate {
	lu.mutation.ResetStatus()
	lu.mutation.SetStatus(u)
	return lu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (lu *LikeUpdate) SetNillableStatus(u *uint8) *LikeUpdate {
	if u != nil {
		lu.SetStatus(*u)
	}
	return lu
}

// AddStatus adds u to the "status" field.
func (lu *LikeUpdate) AddStatus(u int8) *LikeUpdate {
	lu.mutation.AddStatus(u)
	return lu
}

// ClearStatus clears the value of the "status" field.
func (lu *LikeUpdate) ClearStatus() *LikeUpdate {
	lu.mutation.ClearStatus()
	return lu
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (lu *LikeUpdate) SetAccountID(id uuid.UUID) *LikeUpdate {
	lu.mutation.SetAccountID(id)
	return lu
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (lu *LikeUpdate) SetNillableAccountID(id *uuid.UUID) *LikeUpdate {
	if id != nil {
		lu = lu.SetAccountID(*id)
	}
	return lu
}

// SetAccount sets the "account" edge to the Account entity.
func (lu *LikeUpdate) SetAccount(a *Account) *LikeUpdate {
	return lu.SetAccountID(a.ID)
}

// AddPostIDs adds the "post" edge to the Post entity by IDs.
func (lu *LikeUpdate) AddPostIDs(ids ...uuid.UUID) *LikeUpdate {
	lu.mutation.AddPostIDs(ids...)
	return lu
}

// AddPost adds the "post" edges to the Post entity.
func (lu *LikeUpdate) AddPost(p ...*Post) *LikeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.AddPostIDs(ids...)
}

// Mutation returns the LikeMutation object of the builder.
func (lu *LikeUpdate) Mutation() *LikeMutation {
	return lu.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (lu *LikeUpdate) ClearAccount() *LikeUpdate {
	lu.mutation.ClearAccount()
	return lu
}

// ClearPost clears all "post" edges to the Post entity.
func (lu *LikeUpdate) ClearPost() *LikeUpdate {
	lu.mutation.ClearPost()
	return lu
}

// RemovePostIDs removes the "post" edge to Post entities by IDs.
func (lu *LikeUpdate) RemovePostIDs(ids ...uuid.UUID) *LikeUpdate {
	lu.mutation.RemovePostIDs(ids...)
	return lu
}

// RemovePost removes "post" edges to Post entities.
func (lu *LikeUpdate) RemovePost(p ...*Post) *LikeUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return lu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LikeUpdate) Save(ctx context.Context) (int, error) {
	lu.defaults()
	return withHooks(ctx, lu.sqlSave, lu.mutation, lu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LikeUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LikeUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LikeUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lu *LikeUpdate) defaults() {
	if _, ok := lu.mutation.UpdatedAt(); !ok {
		v := like.UpdateDefaultUpdatedAt()
		lu.mutation.SetUpdatedAt(v)
	}
}

func (lu *LikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(like.Table, like.Columns, sqlgraph.NewFieldSpec(like.FieldID, field.TypeUUID))
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.UpdatedAt(); ok {
		_spec.SetField(like.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := lu.mutation.Status(); ok {
		_spec.SetField(like.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := lu.mutation.AddedStatus(); ok {
		_spec.AddField(like.FieldStatus, field.TypeUint8, value)
	}
	if lu.mutation.StatusCleared() {
		_spec.ClearField(like.FieldStatus, field.TypeUint8)
	}
	if lu.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   like.AccountTable,
			Columns: []string{like.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   like.AccountTable,
			Columns: []string{like.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   like.PostTable,
			Columns: like.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedPostIDs(); len(nodes) > 0 && !lu.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   like.PostTable,
			Columns: like.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   like.PostTable,
			Columns: like.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{like.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lu.mutation.done = true
	return n, nil
}

// LikeUpdateOne is the builder for updating a single Like entity.
type LikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LikeMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (luo *LikeUpdateOne) SetUpdatedAt(t time.Time) *LikeUpdateOne {
	luo.mutation.SetUpdatedAt(t)
	return luo
}

// SetStatus sets the "status" field.
func (luo *LikeUpdateOne) SetStatus(u uint8) *LikeUpdateOne {
	luo.mutation.ResetStatus()
	luo.mutation.SetStatus(u)
	return luo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (luo *LikeUpdateOne) SetNillableStatus(u *uint8) *LikeUpdateOne {
	if u != nil {
		luo.SetStatus(*u)
	}
	return luo
}

// AddStatus adds u to the "status" field.
func (luo *LikeUpdateOne) AddStatus(u int8) *LikeUpdateOne {
	luo.mutation.AddStatus(u)
	return luo
}

// ClearStatus clears the value of the "status" field.
func (luo *LikeUpdateOne) ClearStatus() *LikeUpdateOne {
	luo.mutation.ClearStatus()
	return luo
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (luo *LikeUpdateOne) SetAccountID(id uuid.UUID) *LikeUpdateOne {
	luo.mutation.SetAccountID(id)
	return luo
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (luo *LikeUpdateOne) SetNillableAccountID(id *uuid.UUID) *LikeUpdateOne {
	if id != nil {
		luo = luo.SetAccountID(*id)
	}
	return luo
}

// SetAccount sets the "account" edge to the Account entity.
func (luo *LikeUpdateOne) SetAccount(a *Account) *LikeUpdateOne {
	return luo.SetAccountID(a.ID)
}

// AddPostIDs adds the "post" edge to the Post entity by IDs.
func (luo *LikeUpdateOne) AddPostIDs(ids ...uuid.UUID) *LikeUpdateOne {
	luo.mutation.AddPostIDs(ids...)
	return luo
}

// AddPost adds the "post" edges to the Post entity.
func (luo *LikeUpdateOne) AddPost(p ...*Post) *LikeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.AddPostIDs(ids...)
}

// Mutation returns the LikeMutation object of the builder.
func (luo *LikeUpdateOne) Mutation() *LikeMutation {
	return luo.mutation
}

// ClearAccount clears the "account" edge to the Account entity.
func (luo *LikeUpdateOne) ClearAccount() *LikeUpdateOne {
	luo.mutation.ClearAccount()
	return luo
}

// ClearPost clears all "post" edges to the Post entity.
func (luo *LikeUpdateOne) ClearPost() *LikeUpdateOne {
	luo.mutation.ClearPost()
	return luo
}

// RemovePostIDs removes the "post" edge to Post entities by IDs.
func (luo *LikeUpdateOne) RemovePostIDs(ids ...uuid.UUID) *LikeUpdateOne {
	luo.mutation.RemovePostIDs(ids...)
	return luo
}

// RemovePost removes "post" edges to Post entities.
func (luo *LikeUpdateOne) RemovePost(p ...*Post) *LikeUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return luo.RemovePostIDs(ids...)
}

// Where appends a list predicates to the LikeUpdate builder.
func (luo *LikeUpdateOne) Where(ps ...predicate.Like) *LikeUpdateOne {
	luo.mutation.Where(ps...)
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LikeUpdateOne) Select(field string, fields ...string) *LikeUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Like entity.
func (luo *LikeUpdateOne) Save(ctx context.Context) (*Like, error) {
	luo.defaults()
	return withHooks(ctx, luo.sqlSave, luo.mutation, luo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LikeUpdateOne) SaveX(ctx context.Context) *Like {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LikeUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LikeUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (luo *LikeUpdateOne) defaults() {
	if _, ok := luo.mutation.UpdatedAt(); !ok {
		v := like.UpdateDefaultUpdatedAt()
		luo.mutation.SetUpdatedAt(v)
	}
}

func (luo *LikeUpdateOne) sqlSave(ctx context.Context) (_node *Like, err error) {
	_spec := sqlgraph.NewUpdateSpec(like.Table, like.Columns, sqlgraph.NewFieldSpec(like.FieldID, field.TypeUUID))
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Like.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, like.FieldID)
		for _, f := range fields {
			if !like.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != like.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.UpdatedAt(); ok {
		_spec.SetField(like.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := luo.mutation.Status(); ok {
		_spec.SetField(like.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := luo.mutation.AddedStatus(); ok {
		_spec.AddField(like.FieldStatus, field.TypeUint8, value)
	}
	if luo.mutation.StatusCleared() {
		_spec.ClearField(like.FieldStatus, field.TypeUint8)
	}
	if luo.mutation.AccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   like.AccountTable,
			Columns: []string{like.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   like.AccountTable,
			Columns: []string{like.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   like.PostTable,
			Columns: like.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedPostIDs(); len(nodes) > 0 && !luo.mutation.PostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   like.PostTable,
			Columns: like.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.PostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   like.PostTable,
			Columns: like.PostPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Like{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{like.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	luo.mutation.done = true
	return _node, nil
}
