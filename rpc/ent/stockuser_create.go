// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/stockuser"
)

// StockUserCreate is the builder for creating a StockUser entity.
type StockUserCreate struct {
	config
	mutation *StockUserMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (suc *StockUserCreate) SetCreatedAt(t time.Time) *StockUserCreate {
	suc.mutation.SetCreatedAt(t)
	return suc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableCreatedAt(t *time.Time) *StockUserCreate {
	if t != nil {
		suc.SetCreatedAt(*t)
	}
	return suc
}

// SetUpdatedAt sets the "updated_at" field.
func (suc *StockUserCreate) SetUpdatedAt(t time.Time) *StockUserCreate {
	suc.mutation.SetUpdatedAt(t)
	return suc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableUpdatedAt(t *time.Time) *StockUserCreate {
	if t != nil {
		suc.SetUpdatedAt(*t)
	}
	return suc
}

// SetStatus sets the "status" field.
func (suc *StockUserCreate) SetStatus(u uint8) *StockUserCreate {
	suc.mutation.SetStatus(u)
	return suc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableStatus(u *uint8) *StockUserCreate {
	if u != nil {
		suc.SetStatus(*u)
	}
	return suc
}

// SetDeletedAt sets the "deleted_at" field.
func (suc *StockUserCreate) SetDeletedAt(t time.Time) *StockUserCreate {
	suc.mutation.SetDeletedAt(t)
	return suc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableDeletedAt(t *time.Time) *StockUserCreate {
	if t != nil {
		suc.SetDeletedAt(*t)
	}
	return suc
}

// SetUsername sets the "username" field.
func (suc *StockUserCreate) SetUsername(s string) *StockUserCreate {
	suc.mutation.SetUsername(s)
	return suc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableUsername(s *string) *StockUserCreate {
	if s != nil {
		suc.SetUsername(*s)
	}
	return suc
}

// SetPassword sets the "password" field.
func (suc *StockUserCreate) SetPassword(s string) *StockUserCreate {
	suc.mutation.SetPassword(s)
	return suc
}

// SetNickname sets the "nickname" field.
func (suc *StockUserCreate) SetNickname(s string) *StockUserCreate {
	suc.mutation.SetNickname(s)
	return suc
}

// SetDescription sets the "description" field.
func (suc *StockUserCreate) SetDescription(s string) *StockUserCreate {
	suc.mutation.SetDescription(s)
	return suc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableDescription(s *string) *StockUserCreate {
	if s != nil {
		suc.SetDescription(*s)
	}
	return suc
}

// SetHomePath sets the "home_path" field.
func (suc *StockUserCreate) SetHomePath(s string) *StockUserCreate {
	suc.mutation.SetHomePath(s)
	return suc
}

// SetNillableHomePath sets the "home_path" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableHomePath(s *string) *StockUserCreate {
	if s != nil {
		suc.SetHomePath(*s)
	}
	return suc
}

// SetMobile sets the "mobile" field.
func (suc *StockUserCreate) SetMobile(s string) *StockUserCreate {
	suc.mutation.SetMobile(s)
	return suc
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableMobile(s *string) *StockUserCreate {
	if s != nil {
		suc.SetMobile(*s)
	}
	return suc
}

// SetEmail sets the "email" field.
func (suc *StockUserCreate) SetEmail(s string) *StockUserCreate {
	suc.mutation.SetEmail(s)
	return suc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableEmail(s *string) *StockUserCreate {
	if s != nil {
		suc.SetEmail(*s)
	}
	return suc
}

// SetAvatar sets the "avatar" field.
func (suc *StockUserCreate) SetAvatar(s string) *StockUserCreate {
	suc.mutation.SetAvatar(s)
	return suc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableAvatar(s *string) *StockUserCreate {
	if s != nil {
		suc.SetAvatar(*s)
	}
	return suc
}

// SetLastLoginInfo sets the "last_login_info" field.
func (suc *StockUserCreate) SetLastLoginInfo(s string) *StockUserCreate {
	suc.mutation.SetLastLoginInfo(s)
	return suc
}

// SetNillableLastLoginInfo sets the "last_login_info" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableLastLoginInfo(s *string) *StockUserCreate {
	if s != nil {
		suc.SetLastLoginInfo(*s)
	}
	return suc
}

// SetID sets the "id" field.
func (suc *StockUserCreate) SetID(u uuid.UUID) *StockUserCreate {
	suc.mutation.SetID(u)
	return suc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (suc *StockUserCreate) SetNillableID(u *uuid.UUID) *StockUserCreate {
	if u != nil {
		suc.SetID(*u)
	}
	return suc
}

// Mutation returns the StockUserMutation object of the builder.
func (suc *StockUserCreate) Mutation() *StockUserMutation {
	return suc.mutation
}

// Save creates the StockUser in the database.
func (suc *StockUserCreate) Save(ctx context.Context) (*StockUser, error) {
	if err := suc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suc.sqlSave, suc.mutation, suc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (suc *StockUserCreate) SaveX(ctx context.Context) *StockUser {
	v, err := suc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (suc *StockUserCreate) Exec(ctx context.Context) error {
	_, err := suc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suc *StockUserCreate) ExecX(ctx context.Context) {
	if err := suc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suc *StockUserCreate) defaults() error {
	if _, ok := suc.mutation.CreatedAt(); !ok {
		if stockuser.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized stockuser.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := stockuser.DefaultCreatedAt()
		suc.mutation.SetCreatedAt(v)
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		if stockuser.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stockuser.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stockuser.DefaultUpdatedAt()
		suc.mutation.SetUpdatedAt(v)
	}
	if _, ok := suc.mutation.Status(); !ok {
		v := stockuser.DefaultStatus
		suc.mutation.SetStatus(v)
	}
	if _, ok := suc.mutation.HomePath(); !ok {
		v := stockuser.DefaultHomePath
		suc.mutation.SetHomePath(v)
	}
	if _, ok := suc.mutation.Avatar(); !ok {
		v := stockuser.DefaultAvatar
		suc.mutation.SetAvatar(v)
	}
	if _, ok := suc.mutation.LastLoginInfo(); !ok {
		v := stockuser.DefaultLastLoginInfo
		suc.mutation.SetLastLoginInfo(v)
	}
	if _, ok := suc.mutation.ID(); !ok {
		if stockuser.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized stockuser.DefaultID (forgotten import ent/runtime?)")
		}
		v := stockuser.DefaultID()
		suc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suc *StockUserCreate) check() error {
	if _, ok := suc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "StockUser.created_at"`)}
	}
	if _, ok := suc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "StockUser.updated_at"`)}
	}
	if _, ok := suc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "StockUser.password"`)}
	}
	if _, ok := suc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "StockUser.nickname"`)}
	}
	if _, ok := suc.mutation.HomePath(); !ok {
		return &ValidationError{Name: "home_path", err: errors.New(`ent: missing required field "StockUser.home_path"`)}
	}
	return nil
}

func (suc *StockUserCreate) sqlSave(ctx context.Context) (*StockUser, error) {
	if err := suc.check(); err != nil {
		return nil, err
	}
	_node, _spec := suc.createSpec()
	if err := sqlgraph.CreateNode(ctx, suc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	suc.mutation.id = &_node.ID
	suc.mutation.done = true
	return _node, nil
}

func (suc *StockUserCreate) createSpec() (*StockUser, *sqlgraph.CreateSpec) {
	var (
		_node = &StockUser{config: suc.config}
		_spec = sqlgraph.NewCreateSpec(stockuser.Table, sqlgraph.NewFieldSpec(stockuser.FieldID, field.TypeUUID))
	)
	if id, ok := suc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := suc.mutation.CreatedAt(); ok {
		_spec.SetField(stockuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := suc.mutation.UpdatedAt(); ok {
		_spec.SetField(stockuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := suc.mutation.Status(); ok {
		_spec.SetField(stockuser.FieldStatus, field.TypeUint8, value)
		_node.Status = value
	}
	if value, ok := suc.mutation.DeletedAt(); ok {
		_spec.SetField(stockuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := suc.mutation.Username(); ok {
		_spec.SetField(stockuser.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := suc.mutation.Password(); ok {
		_spec.SetField(stockuser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := suc.mutation.Nickname(); ok {
		_spec.SetField(stockuser.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := suc.mutation.Description(); ok {
		_spec.SetField(stockuser.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := suc.mutation.HomePath(); ok {
		_spec.SetField(stockuser.FieldHomePath, field.TypeString, value)
		_node.HomePath = value
	}
	if value, ok := suc.mutation.Mobile(); ok {
		_spec.SetField(stockuser.FieldMobile, field.TypeString, value)
		_node.Mobile = value
	}
	if value, ok := suc.mutation.Email(); ok {
		_spec.SetField(stockuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := suc.mutation.Avatar(); ok {
		_spec.SetField(stockuser.FieldAvatar, field.TypeString, value)
		_node.Avatar = value
	}
	if value, ok := suc.mutation.LastLoginInfo(); ok {
		_spec.SetField(stockuser.FieldLastLoginInfo, field.TypeString, value)
		_node.LastLoginInfo = value
	}
	return _node, _spec
}

// StockUserCreateBulk is the builder for creating many StockUser entities in bulk.
type StockUserCreateBulk struct {
	config
	err      error
	builders []*StockUserCreate
}

// Save creates the StockUser entities in the database.
func (sucb *StockUserCreateBulk) Save(ctx context.Context) ([]*StockUser, error) {
	if sucb.err != nil {
		return nil, sucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sucb.builders))
	nodes := make([]*StockUser, len(sucb.builders))
	mutators := make([]Mutator, len(sucb.builders))
	for i := range sucb.builders {
		func(i int, root context.Context) {
			builder := sucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StockUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sucb *StockUserCreateBulk) SaveX(ctx context.Context) []*StockUser {
	v, err := sucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sucb *StockUserCreateBulk) Exec(ctx context.Context) error {
	_, err := sucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sucb *StockUserCreateBulk) ExecX(ctx context.Context) {
	if err := sucb.Exec(ctx); err != nil {
		panic(err)
	}
}
