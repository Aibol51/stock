// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/account"
	"github.com/suyuan32/simple-admin-core/rpc/ent/view"
)

// View is the model entity for the View schema.
type View struct {
	config `json:"-"`
	// ID of the ent.
	// UUID
	ID uuid.UUID `json:"id,omitempty"`
	// Create Time | 创建日期
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Update Time | 修改日期
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status 1: normal 2: ban | 状态 1 正常 2 禁用
	Status uint8 `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ViewQuery when eager-loading is set.
	Edges         ViewEdges `json:"edges"`
	account_views *uuid.UUID
	selectValues  sql.SelectValues
}

// ViewEdges holds the relations/edges for other nodes in the graph.
type ViewEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Post holds the value of the post edge.
	Post []*Post `json:"post,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ViewEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// PostOrErr returns the Post value or an error if the edge
// was not loaded in eager-loading.
func (e ViewEdges) PostOrErr() ([]*Post, error) {
	if e.loadedTypes[1] {
		return e.Post, nil
	}
	return nil, &NotLoadedError{edge: "post"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*View) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case view.FieldStatus:
			values[i] = new(sql.NullInt64)
		case view.FieldCreatedAt, view.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case view.FieldID:
			values[i] = new(uuid.UUID)
		case view.ForeignKeys[0]: // account_views
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the View fields.
func (v *View) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case view.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case view.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case view.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case view.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				v.Status = uint8(value.Int64)
			}
		case view.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field account_views", values[i])
			} else if value.Valid {
				v.account_views = new(uuid.UUID)
				*v.account_views = *value.S.(*uuid.UUID)
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the View.
// This includes values selected through modifiers, order, etc.
func (v *View) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// QueryAccount queries the "account" edge of the View entity.
func (v *View) QueryAccount() *AccountQuery {
	return NewViewClient(v.config).QueryAccount(v)
}

// QueryPost queries the "post" edge of the View entity.
func (v *View) QueryPost() *PostQuery {
	return NewViewClient(v.config).QueryPost(v)
}

// Update returns a builder for updating this View.
// Note that you need to call View.Unwrap() before calling this method if this View
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *View) Update() *ViewUpdateOne {
	return NewViewClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the View entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *View) Unwrap() *View {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: View is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *View) String() string {
	var builder strings.Builder
	builder.WriteString("View(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", v.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Views is a parsable slice of View.
type Views []*View
