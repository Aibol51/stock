// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/account"
	"github.com/suyuan32/simple-admin-core/rpc/ent/comment"
	"github.com/suyuan32/simple-admin-core/rpc/ent/like"
	"github.com/suyuan32/simple-admin-core/rpc/ent/post"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
	"github.com/suyuan32/simple-admin-core/rpc/ent/view"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// Where appends a list predicates to the AccountUpdate builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AccountUpdate) SetUpdatedAt(t time.Time) *AccountUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetStatus sets the "status" field.
func (au *AccountUpdate) SetStatus(u uint8) *AccountUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AccountUpdate) SetNillableStatus(u *uint8) *AccountUpdate {
	if u != nil {
		au.SetStatus(*u)
	}
	return au
}

// AddStatus adds u to the "status" field.
func (au *AccountUpdate) AddStatus(u int8) *AccountUpdate {
	au.mutation.AddStatus(u)
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *AccountUpdate) ClearStatus() *AccountUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetDeletedAt sets the "deleted_at" field.
func (au *AccountUpdate) SetDeletedAt(t time.Time) *AccountUpdate {
	au.mutation.SetDeletedAt(t)
	return au
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (au *AccountUpdate) SetNillableDeletedAt(t *time.Time) *AccountUpdate {
	if t != nil {
		au.SetDeletedAt(*t)
	}
	return au
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (au *AccountUpdate) ClearDeletedAt() *AccountUpdate {
	au.mutation.ClearDeletedAt()
	return au
}

// SetAccountName sets the "account_name" field.
func (au *AccountUpdate) SetAccountName(s string) *AccountUpdate {
	au.mutation.SetAccountName(s)
	return au
}

// SetPassword sets the "password" field.
func (au *AccountUpdate) SetPassword(s string) *AccountUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetMobile sets the "mobile" field.
func (au *AccountUpdate) SetMobile(u uint32) *AccountUpdate {
	au.mutation.ResetMobile()
	au.mutation.SetMobile(u)
	return au
}

// AddMobile adds u to the "mobile" field.
func (au *AccountUpdate) AddMobile(u int32) *AccountUpdate {
	au.mutation.AddMobile(u)
	return au
}

// SetEmail sets the "email" field.
func (au *AccountUpdate) SetEmail(s string) *AccountUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetAvatar sets the "avatar" field.
func (au *AccountUpdate) SetAvatar(s string) *AccountUpdate {
	au.mutation.SetAvatar(s)
	return au
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (au *AccountUpdate) SetNillableAvatar(s *string) *AccountUpdate {
	if s != nil {
		au.SetAvatar(*s)
	}
	return au
}

// ClearAvatar clears the value of the "avatar" field.
func (au *AccountUpdate) ClearAvatar() *AccountUpdate {
	au.mutation.ClearAvatar()
	return au
}

// SetGender sets the "gender" field.
func (au *AccountUpdate) SetGender(a account.Gender) *AccountUpdate {
	au.mutation.SetGender(a)
	return au
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (au *AccountUpdate) SetNillableGender(a *account.Gender) *AccountUpdate {
	if a != nil {
		au.SetGender(*a)
	}
	return au
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (au *AccountUpdate) AddPostIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.AddPostIDs(ids...)
	return au
}

// AddPosts adds the "posts" edges to the Post entity.
func (au *AccountUpdate) AddPosts(p ...*Post) *AccountUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPostIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (au *AccountUpdate) AddCommentIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.AddCommentIDs(ids...)
	return au
}

// AddComments adds the "comments" edges to the Comment entity.
func (au *AccountUpdate) AddComments(c ...*Comment) *AccountUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.AddCommentIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (au *AccountUpdate) AddLikeIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.AddLikeIDs(ids...)
	return au
}

// AddLikes adds the "likes" edges to the Like entity.
func (au *AccountUpdate) AddLikes(l ...*Like) *AccountUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.AddLikeIDs(ids...)
}

// AddViewIDs adds the "views" edge to the View entity by IDs.
func (au *AccountUpdate) AddViewIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.AddViewIDs(ids...)
	return au
}

// AddViews adds the "views" edges to the View entity.
func (au *AccountUpdate) AddViews(v ...*View) *AccountUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.AddViewIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (au *AccountUpdate) Mutation() *AccountMutation {
	return au.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (au *AccountUpdate) ClearPosts() *AccountUpdate {
	au.mutation.ClearPosts()
	return au
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (au *AccountUpdate) RemovePostIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.RemovePostIDs(ids...)
	return au
}

// RemovePosts removes "posts" edges to Post entities.
func (au *AccountUpdate) RemovePosts(p ...*Post) *AccountUpdate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePostIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (au *AccountUpdate) ClearComments() *AccountUpdate {
	au.mutation.ClearComments()
	return au
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (au *AccountUpdate) RemoveCommentIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.RemoveCommentIDs(ids...)
	return au
}

// RemoveComments removes "comments" edges to Comment entities.
func (au *AccountUpdate) RemoveComments(c ...*Comment) *AccountUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return au.RemoveCommentIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (au *AccountUpdate) ClearLikes() *AccountUpdate {
	au.mutation.ClearLikes()
	return au
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (au *AccountUpdate) RemoveLikeIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.RemoveLikeIDs(ids...)
	return au
}

// RemoveLikes removes "likes" edges to Like entities.
func (au *AccountUpdate) RemoveLikes(l ...*Like) *AccountUpdate {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.RemoveLikeIDs(ids...)
}

// ClearViews clears all "views" edges to the View entity.
func (au *AccountUpdate) ClearViews() *AccountUpdate {
	au.mutation.ClearViews()
	return au
}

// RemoveViewIDs removes the "views" edge to View entities by IDs.
func (au *AccountUpdate) RemoveViewIDs(ids ...uuid.UUID) *AccountUpdate {
	au.mutation.RemoveViewIDs(ids...)
	return au
}

// RemoveViews removes "views" edges to View entities.
func (au *AccountUpdate) RemoveViews(v ...*View) *AccountUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return au.RemoveViewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	if err := au.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AccountUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if account.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized account.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := account.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (au *AccountUpdate) check() error {
	if v, ok := au.mutation.Gender(); ok {
		if err := account.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Account.gender": %w`, err)}
		}
	}
	return nil
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(account.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.AddField(account.FieldStatus, field.TypeUint8, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(account.FieldStatus, field.TypeUint8)
	}
	if value, ok := au.mutation.DeletedAt(); ok {
		_spec.SetField(account.FieldDeletedAt, field.TypeTime, value)
	}
	if au.mutation.DeletedAtCleared() {
		_spec.ClearField(account.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := au.mutation.AccountName(); ok {
		_spec.SetField(account.FieldAccountName, field.TypeString, value)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
	}
	if value, ok := au.mutation.Mobile(); ok {
		_spec.SetField(account.FieldMobile, field.TypeUint32, value)
	}
	if value, ok := au.mutation.AddedMobile(); ok {
		_spec.AddField(account.FieldMobile, field.TypeUint32, value)
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if value, ok := au.mutation.Avatar(); ok {
		_spec.SetField(account.FieldAvatar, field.TypeString, value)
	}
	if au.mutation.AvatarCleared() {
		_spec.ClearField(account.FieldAvatar, field.TypeString)
	}
	if value, ok := au.mutation.Gender(); ok {
		_spec.SetField(account.FieldGender, field.TypeEnum, value)
	}
	if au.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPostsIDs(); len(nodes) > 0 && !au.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.CommentsTable,
			Columns: account.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !au.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.CommentsTable,
			Columns: account.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.CommentsTable,
			Columns: account.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedLikesIDs(); len(nodes) > 0 && !au.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ViewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ViewsTable,
			Columns: []string{account.ViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(view.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedViewsIDs(); len(nodes) > 0 && !au.mutation.ViewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ViewsTable,
			Columns: []string{account.ViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(view.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ViewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ViewsTable,
			Columns: []string{account.ViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(view.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccountMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AccountUpdateOne) SetUpdatedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetStatus sets the "status" field.
func (auo *AccountUpdateOne) SetStatus(u uint8) *AccountUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableStatus(u *uint8) *AccountUpdateOne {
	if u != nil {
		auo.SetStatus(*u)
	}
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *AccountUpdateOne) AddStatus(u int8) *AccountUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *AccountUpdateOne) ClearStatus() *AccountUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetDeletedAt sets the "deleted_at" field.
func (auo *AccountUpdateOne) SetDeletedAt(t time.Time) *AccountUpdateOne {
	auo.mutation.SetDeletedAt(t)
	return auo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableDeletedAt(t *time.Time) *AccountUpdateOne {
	if t != nil {
		auo.SetDeletedAt(*t)
	}
	return auo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (auo *AccountUpdateOne) ClearDeletedAt() *AccountUpdateOne {
	auo.mutation.ClearDeletedAt()
	return auo
}

// SetAccountName sets the "account_name" field.
func (auo *AccountUpdateOne) SetAccountName(s string) *AccountUpdateOne {
	auo.mutation.SetAccountName(s)
	return auo
}

// SetPassword sets the "password" field.
func (auo *AccountUpdateOne) SetPassword(s string) *AccountUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetMobile sets the "mobile" field.
func (auo *AccountUpdateOne) SetMobile(u uint32) *AccountUpdateOne {
	auo.mutation.ResetMobile()
	auo.mutation.SetMobile(u)
	return auo
}

// AddMobile adds u to the "mobile" field.
func (auo *AccountUpdateOne) AddMobile(u int32) *AccountUpdateOne {
	auo.mutation.AddMobile(u)
	return auo
}

// SetEmail sets the "email" field.
func (auo *AccountUpdateOne) SetEmail(s string) *AccountUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetAvatar sets the "avatar" field.
func (auo *AccountUpdateOne) SetAvatar(s string) *AccountUpdateOne {
	auo.mutation.SetAvatar(s)
	return auo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableAvatar(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetAvatar(*s)
	}
	return auo
}

// ClearAvatar clears the value of the "avatar" field.
func (auo *AccountUpdateOne) ClearAvatar() *AccountUpdateOne {
	auo.mutation.ClearAvatar()
	return auo
}

// SetGender sets the "gender" field.
func (auo *AccountUpdateOne) SetGender(a account.Gender) *AccountUpdateOne {
	auo.mutation.SetGender(a)
	return auo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableGender(a *account.Gender) *AccountUpdateOne {
	if a != nil {
		auo.SetGender(*a)
	}
	return auo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (auo *AccountUpdateOne) AddPostIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.AddPostIDs(ids...)
	return auo
}

// AddPosts adds the "posts" edges to the Post entity.
func (auo *AccountUpdateOne) AddPosts(p ...*Post) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPostIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (auo *AccountUpdateOne) AddCommentIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.AddCommentIDs(ids...)
	return auo
}

// AddComments adds the "comments" edges to the Comment entity.
func (auo *AccountUpdateOne) AddComments(c ...*Comment) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.AddCommentIDs(ids...)
}

// AddLikeIDs adds the "likes" edge to the Like entity by IDs.
func (auo *AccountUpdateOne) AddLikeIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.AddLikeIDs(ids...)
	return auo
}

// AddLikes adds the "likes" edges to the Like entity.
func (auo *AccountUpdateOne) AddLikes(l ...*Like) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.AddLikeIDs(ids...)
}

// AddViewIDs adds the "views" edge to the View entity by IDs.
func (auo *AccountUpdateOne) AddViewIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.AddViewIDs(ids...)
	return auo
}

// AddViews adds the "views" edges to the View entity.
func (auo *AccountUpdateOne) AddViews(v ...*View) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.AddViewIDs(ids...)
}

// Mutation returns the AccountMutation object of the builder.
func (auo *AccountUpdateOne) Mutation() *AccountMutation {
	return auo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (auo *AccountUpdateOne) ClearPosts() *AccountUpdateOne {
	auo.mutation.ClearPosts()
	return auo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (auo *AccountUpdateOne) RemovePostIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.RemovePostIDs(ids...)
	return auo
}

// RemovePosts removes "posts" edges to Post entities.
func (auo *AccountUpdateOne) RemovePosts(p ...*Post) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePostIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (auo *AccountUpdateOne) ClearComments() *AccountUpdateOne {
	auo.mutation.ClearComments()
	return auo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (auo *AccountUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.RemoveCommentIDs(ids...)
	return auo
}

// RemoveComments removes "comments" edges to Comment entities.
func (auo *AccountUpdateOne) RemoveComments(c ...*Comment) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return auo.RemoveCommentIDs(ids...)
}

// ClearLikes clears all "likes" edges to the Like entity.
func (auo *AccountUpdateOne) ClearLikes() *AccountUpdateOne {
	auo.mutation.ClearLikes()
	return auo
}

// RemoveLikeIDs removes the "likes" edge to Like entities by IDs.
func (auo *AccountUpdateOne) RemoveLikeIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.RemoveLikeIDs(ids...)
	return auo
}

// RemoveLikes removes "likes" edges to Like entities.
func (auo *AccountUpdateOne) RemoveLikes(l ...*Like) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.RemoveLikeIDs(ids...)
}

// ClearViews clears all "views" edges to the View entity.
func (auo *AccountUpdateOne) ClearViews() *AccountUpdateOne {
	auo.mutation.ClearViews()
	return auo
}

// RemoveViewIDs removes the "views" edge to View entities by IDs.
func (auo *AccountUpdateOne) RemoveViewIDs(ids ...uuid.UUID) *AccountUpdateOne {
	auo.mutation.RemoveViewIDs(ids...)
	return auo
}

// RemoveViews removes "views" edges to View entities.
func (auo *AccountUpdateOne) RemoveViews(v ...*View) *AccountUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return auo.RemoveViewIDs(ids...)
}

// Where appends a list predicates to the AccountUpdate builder.
func (auo *AccountUpdateOne) Where(ps ...predicate.Account) *AccountUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AccountUpdateOne) Select(field string, fields ...string) *AccountUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Account entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AccountUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if account.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized account.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := account.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (auo *AccountUpdateOne) check() error {
	if v, ok := auo.mutation.Gender(); ok {
		if err := account.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Account.gender": %w`, err)}
		}
	}
	return nil
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (_node *Account, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(account.Table, account.Columns, sqlgraph.NewFieldSpec(account.FieldID, field.TypeUUID))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Account.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, account.FieldID)
		for _, f := range fields {
			if !account.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != account.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(account.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(account.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.AddField(account.FieldStatus, field.TypeUint8, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(account.FieldStatus, field.TypeUint8)
	}
	if value, ok := auo.mutation.DeletedAt(); ok {
		_spec.SetField(account.FieldDeletedAt, field.TypeTime, value)
	}
	if auo.mutation.DeletedAtCleared() {
		_spec.ClearField(account.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.AccountName(); ok {
		_spec.SetField(account.FieldAccountName, field.TypeString, value)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(account.FieldPassword, field.TypeString, value)
	}
	if value, ok := auo.mutation.Mobile(); ok {
		_spec.SetField(account.FieldMobile, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.AddedMobile(); ok {
		_spec.AddField(account.FieldMobile, field.TypeUint32, value)
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(account.FieldEmail, field.TypeString, value)
	}
	if value, ok := auo.mutation.Avatar(); ok {
		_spec.SetField(account.FieldAvatar, field.TypeString, value)
	}
	if auo.mutation.AvatarCleared() {
		_spec.ClearField(account.FieldAvatar, field.TypeString)
	}
	if value, ok := auo.mutation.Gender(); ok {
		_spec.SetField(account.FieldGender, field.TypeEnum, value)
	}
	if auo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !auo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.PostsTable,
			Columns: []string{account.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.CommentsTable,
			Columns: account.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !auo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.CommentsTable,
			Columns: account.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   account.CommentsTable,
			Columns: account.CommentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedLikesIDs(); len(nodes) > 0 && !auo.mutation.LikesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LikesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.LikesTable,
			Columns: []string{account.LikesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(like.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ViewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ViewsTable,
			Columns: []string{account.ViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(view.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedViewsIDs(); len(nodes) > 0 && !auo.mutation.ViewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ViewsTable,
			Columns: []string{account.ViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(view.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ViewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   account.ViewsTable,
			Columns: []string{account.ViewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(view.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Account{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
