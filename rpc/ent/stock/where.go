// Code generated by ent, DO NOT EDIT.

package stock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	uuid "github.com/gofrs/uuid/v5"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldUpdatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStatus, v))
}

// StockName applies equality check predicate on the "stock_name" field. It's identical to StockNameEQ.
func StockName(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStockName, v))
}

// StockCode applies equality check predicate on the "stock_code" field. It's identical to StockCodeEQ.
func StockCode(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStockCode, v))
}

// IsRecommend applies equality check predicate on the "is_recommend" field. It's identical to IsRecommendEQ.
func IsRecommend(v bool) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldIsRecommend, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldUpdatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...uint8) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...uint8) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v uint8) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.Stock {
	return predicate.Stock(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.Stock {
	return predicate.Stock(sql.FieldNotNull(FieldStatus))
}

// StockNameEQ applies the EQ predicate on the "stock_name" field.
func StockNameEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStockName, v))
}

// StockNameNEQ applies the NEQ predicate on the "stock_name" field.
func StockNameNEQ(v string) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldStockName, v))
}

// StockNameIn applies the In predicate on the "stock_name" field.
func StockNameIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldStockName, vs...))
}

// StockNameNotIn applies the NotIn predicate on the "stock_name" field.
func StockNameNotIn(vs ...string) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldStockName, vs...))
}

// StockNameGT applies the GT predicate on the "stock_name" field.
func StockNameGT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldStockName, v))
}

// StockNameGTE applies the GTE predicate on the "stock_name" field.
func StockNameGTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldStockName, v))
}

// StockNameLT applies the LT predicate on the "stock_name" field.
func StockNameLT(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldStockName, v))
}

// StockNameLTE applies the LTE predicate on the "stock_name" field.
func StockNameLTE(v string) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldStockName, v))
}

// StockNameContains applies the Contains predicate on the "stock_name" field.
func StockNameContains(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContains(FieldStockName, v))
}

// StockNameHasPrefix applies the HasPrefix predicate on the "stock_name" field.
func StockNameHasPrefix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasPrefix(FieldStockName, v))
}

// StockNameHasSuffix applies the HasSuffix predicate on the "stock_name" field.
func StockNameHasSuffix(v string) predicate.Stock {
	return predicate.Stock(sql.FieldHasSuffix(FieldStockName, v))
}

// StockNameEqualFold applies the EqualFold predicate on the "stock_name" field.
func StockNameEqualFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldEqualFold(FieldStockName, v))
}

// StockNameContainsFold applies the ContainsFold predicate on the "stock_name" field.
func StockNameContainsFold(v string) predicate.Stock {
	return predicate.Stock(sql.FieldContainsFold(FieldStockName, v))
}

// StockCodeEQ applies the EQ predicate on the "stock_code" field.
func StockCodeEQ(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldStockCode, v))
}

// StockCodeNEQ applies the NEQ predicate on the "stock_code" field.
func StockCodeNEQ(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldStockCode, v))
}

// StockCodeIn applies the In predicate on the "stock_code" field.
func StockCodeIn(vs ...int32) predicate.Stock {
	return predicate.Stock(sql.FieldIn(FieldStockCode, vs...))
}

// StockCodeNotIn applies the NotIn predicate on the "stock_code" field.
func StockCodeNotIn(vs ...int32) predicate.Stock {
	return predicate.Stock(sql.FieldNotIn(FieldStockCode, vs...))
}

// StockCodeGT applies the GT predicate on the "stock_code" field.
func StockCodeGT(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldGT(FieldStockCode, v))
}

// StockCodeGTE applies the GTE predicate on the "stock_code" field.
func StockCodeGTE(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldGTE(FieldStockCode, v))
}

// StockCodeLT applies the LT predicate on the "stock_code" field.
func StockCodeLT(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldLT(FieldStockCode, v))
}

// StockCodeLTE applies the LTE predicate on the "stock_code" field.
func StockCodeLTE(v int32) predicate.Stock {
	return predicate.Stock(sql.FieldLTE(FieldStockCode, v))
}

// IsRecommendEQ applies the EQ predicate on the "is_recommend" field.
func IsRecommendEQ(v bool) predicate.Stock {
	return predicate.Stock(sql.FieldEQ(FieldIsRecommend, v))
}

// IsRecommendNEQ applies the NEQ predicate on the "is_recommend" field.
func IsRecommendNEQ(v bool) predicate.Stock {
	return predicate.Stock(sql.FieldNEQ(FieldIsRecommend, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Stock) predicate.Stock {
	return predicate.Stock(sql.NotPredicates(p))
}
