// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
	"github.com/suyuan32/simple-admin-core/rpc/ent/stockuser"
)

// StockUserDelete is the builder for deleting a StockUser entity.
type StockUserDelete struct {
	config
	hooks    []Hook
	mutation *StockUserMutation
}

// Where appends a list predicates to the StockUserDelete builder.
func (sud *StockUserDelete) Where(ps ...predicate.StockUser) *StockUserDelete {
	sud.mutation.Where(ps...)
	return sud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sud *StockUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, sud.sqlExec, sud.mutation, sud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (sud *StockUserDelete) ExecX(ctx context.Context) int {
	n, err := sud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sud *StockUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(stockuser.Table, sqlgraph.NewFieldSpec(stockuser.FieldID, field.TypeUUID))
	if ps := sud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, sud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	sud.mutation.done = true
	return affected, err
}

// StockUserDeleteOne is the builder for deleting a single StockUser entity.
type StockUserDeleteOne struct {
	sud *StockUserDelete
}

// Where appends a list predicates to the StockUserDelete builder.
func (sudo *StockUserDeleteOne) Where(ps ...predicate.StockUser) *StockUserDeleteOne {
	sudo.sud.mutation.Where(ps...)
	return sudo
}

// Exec executes the deletion query.
func (sudo *StockUserDeleteOne) Exec(ctx context.Context) error {
	n, err := sudo.sud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{stockuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sudo *StockUserDeleteOne) ExecX(ctx context.Context) {
	if err := sudo.Exec(ctx); err != nil {
		panic(err)
	}
}
