// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/suyuan32/simple-admin-core/rpc/ent/predicate"
	"github.com/suyuan32/simple-admin-core/rpc/ent/stockuser"
)

// StockUserUpdate is the builder for updating StockUser entities.
type StockUserUpdate struct {
	config
	hooks    []Hook
	mutation *StockUserMutation
}

// Where appends a list predicates to the StockUserUpdate builder.
func (suu *StockUserUpdate) Where(ps ...predicate.StockUser) *StockUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetUpdatedAt sets the "updated_at" field.
func (suu *StockUserUpdate) SetUpdatedAt(t time.Time) *StockUserUpdate {
	suu.mutation.SetUpdatedAt(t)
	return suu
}

// SetStatus sets the "status" field.
func (suu *StockUserUpdate) SetStatus(u uint8) *StockUserUpdate {
	suu.mutation.ResetStatus()
	suu.mutation.SetStatus(u)
	return suu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableStatus(u *uint8) *StockUserUpdate {
	if u != nil {
		suu.SetStatus(*u)
	}
	return suu
}

// AddStatus adds u to the "status" field.
func (suu *StockUserUpdate) AddStatus(u int8) *StockUserUpdate {
	suu.mutation.AddStatus(u)
	return suu
}

// ClearStatus clears the value of the "status" field.
func (suu *StockUserUpdate) ClearStatus() *StockUserUpdate {
	suu.mutation.ClearStatus()
	return suu
}

// SetDeletedAt sets the "deleted_at" field.
func (suu *StockUserUpdate) SetDeletedAt(t time.Time) *StockUserUpdate {
	suu.mutation.SetDeletedAt(t)
	return suu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableDeletedAt(t *time.Time) *StockUserUpdate {
	if t != nil {
		suu.SetDeletedAt(*t)
	}
	return suu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suu *StockUserUpdate) ClearDeletedAt() *StockUserUpdate {
	suu.mutation.ClearDeletedAt()
	return suu
}

// SetUsername sets the "username" field.
func (suu *StockUserUpdate) SetUsername(s string) *StockUserUpdate {
	suu.mutation.SetUsername(s)
	return suu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableUsername(s *string) *StockUserUpdate {
	if s != nil {
		suu.SetUsername(*s)
	}
	return suu
}

// ClearUsername clears the value of the "username" field.
func (suu *StockUserUpdate) ClearUsername() *StockUserUpdate {
	suu.mutation.ClearUsername()
	return suu
}

// SetPassword sets the "password" field.
func (suu *StockUserUpdate) SetPassword(s string) *StockUserUpdate {
	suu.mutation.SetPassword(s)
	return suu
}

// SetNickname sets the "nickname" field.
func (suu *StockUserUpdate) SetNickname(s string) *StockUserUpdate {
	suu.mutation.SetNickname(s)
	return suu
}

// SetDescription sets the "description" field.
func (suu *StockUserUpdate) SetDescription(s string) *StockUserUpdate {
	suu.mutation.SetDescription(s)
	return suu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableDescription(s *string) *StockUserUpdate {
	if s != nil {
		suu.SetDescription(*s)
	}
	return suu
}

// ClearDescription clears the value of the "description" field.
func (suu *StockUserUpdate) ClearDescription() *StockUserUpdate {
	suu.mutation.ClearDescription()
	return suu
}

// SetHomePath sets the "home_path" field.
func (suu *StockUserUpdate) SetHomePath(s string) *StockUserUpdate {
	suu.mutation.SetHomePath(s)
	return suu
}

// SetNillableHomePath sets the "home_path" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableHomePath(s *string) *StockUserUpdate {
	if s != nil {
		suu.SetHomePath(*s)
	}
	return suu
}

// SetMobile sets the "mobile" field.
func (suu *StockUserUpdate) SetMobile(s string) *StockUserUpdate {
	suu.mutation.SetMobile(s)
	return suu
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableMobile(s *string) *StockUserUpdate {
	if s != nil {
		suu.SetMobile(*s)
	}
	return suu
}

// ClearMobile clears the value of the "mobile" field.
func (suu *StockUserUpdate) ClearMobile() *StockUserUpdate {
	suu.mutation.ClearMobile()
	return suu
}

// SetEmail sets the "email" field.
func (suu *StockUserUpdate) SetEmail(s string) *StockUserUpdate {
	suu.mutation.SetEmail(s)
	return suu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableEmail(s *string) *StockUserUpdate {
	if s != nil {
		suu.SetEmail(*s)
	}
	return suu
}

// ClearEmail clears the value of the "email" field.
func (suu *StockUserUpdate) ClearEmail() *StockUserUpdate {
	suu.mutation.ClearEmail()
	return suu
}

// SetAvatar sets the "avatar" field.
func (suu *StockUserUpdate) SetAvatar(s string) *StockUserUpdate {
	suu.mutation.SetAvatar(s)
	return suu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableAvatar(s *string) *StockUserUpdate {
	if s != nil {
		suu.SetAvatar(*s)
	}
	return suu
}

// ClearAvatar clears the value of the "avatar" field.
func (suu *StockUserUpdate) ClearAvatar() *StockUserUpdate {
	suu.mutation.ClearAvatar()
	return suu
}

// SetLastLoginInfo sets the "last_login_info" field.
func (suu *StockUserUpdate) SetLastLoginInfo(s string) *StockUserUpdate {
	suu.mutation.SetLastLoginInfo(s)
	return suu
}

// SetNillableLastLoginInfo sets the "last_login_info" field if the given value is not nil.
func (suu *StockUserUpdate) SetNillableLastLoginInfo(s *string) *StockUserUpdate {
	if s != nil {
		suu.SetLastLoginInfo(*s)
	}
	return suu
}

// ClearLastLoginInfo clears the value of the "last_login_info" field.
func (suu *StockUserUpdate) ClearLastLoginInfo() *StockUserUpdate {
	suu.mutation.ClearLastLoginInfo()
	return suu
}

// Mutation returns the StockUserMutation object of the builder.
func (suu *StockUserUpdate) Mutation() *StockUserMutation {
	return suu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *StockUserUpdate) Save(ctx context.Context) (int, error) {
	if err := suu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, suu.sqlSave, suu.mutation, suu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suu *StockUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *StockUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *StockUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suu *StockUserUpdate) defaults() error {
	if _, ok := suu.mutation.UpdatedAt(); !ok {
		if stockuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stockuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stockuser.UpdateDefaultUpdatedAt()
		suu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (suu *StockUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(stockuser.Table, stockuser.Columns, sqlgraph.NewFieldSpec(stockuser.FieldID, field.TypeUUID))
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.UpdatedAt(); ok {
		_spec.SetField(stockuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suu.mutation.Status(); ok {
		_spec.SetField(stockuser.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suu.mutation.AddedStatus(); ok {
		_spec.AddField(stockuser.FieldStatus, field.TypeUint8, value)
	}
	if suu.mutation.StatusCleared() {
		_spec.ClearField(stockuser.FieldStatus, field.TypeUint8)
	}
	if value, ok := suu.mutation.DeletedAt(); ok {
		_spec.SetField(stockuser.FieldDeletedAt, field.TypeTime, value)
	}
	if suu.mutation.DeletedAtCleared() {
		_spec.ClearField(stockuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suu.mutation.Username(); ok {
		_spec.SetField(stockuser.FieldUsername, field.TypeString, value)
	}
	if suu.mutation.UsernameCleared() {
		_spec.ClearField(stockuser.FieldUsername, field.TypeString)
	}
	if value, ok := suu.mutation.Password(); ok {
		_spec.SetField(stockuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := suu.mutation.Nickname(); ok {
		_spec.SetField(stockuser.FieldNickname, field.TypeString, value)
	}
	if value, ok := suu.mutation.Description(); ok {
		_spec.SetField(stockuser.FieldDescription, field.TypeString, value)
	}
	if suu.mutation.DescriptionCleared() {
		_spec.ClearField(stockuser.FieldDescription, field.TypeString)
	}
	if value, ok := suu.mutation.HomePath(); ok {
		_spec.SetField(stockuser.FieldHomePath, field.TypeString, value)
	}
	if value, ok := suu.mutation.Mobile(); ok {
		_spec.SetField(stockuser.FieldMobile, field.TypeString, value)
	}
	if suu.mutation.MobileCleared() {
		_spec.ClearField(stockuser.FieldMobile, field.TypeString)
	}
	if value, ok := suu.mutation.Email(); ok {
		_spec.SetField(stockuser.FieldEmail, field.TypeString, value)
	}
	if suu.mutation.EmailCleared() {
		_spec.ClearField(stockuser.FieldEmail, field.TypeString)
	}
	if value, ok := suu.mutation.Avatar(); ok {
		_spec.SetField(stockuser.FieldAvatar, field.TypeString, value)
	}
	if suu.mutation.AvatarCleared() {
		_spec.ClearField(stockuser.FieldAvatar, field.TypeString)
	}
	if value, ok := suu.mutation.LastLoginInfo(); ok {
		_spec.SetField(stockuser.FieldLastLoginInfo, field.TypeString, value)
	}
	if suu.mutation.LastLoginInfoCleared() {
		_spec.ClearField(stockuser.FieldLastLoginInfo, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stockuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suu.mutation.done = true
	return n, nil
}

// StockUserUpdateOne is the builder for updating a single StockUser entity.
type StockUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StockUserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suuo *StockUserUpdateOne) SetUpdatedAt(t time.Time) *StockUserUpdateOne {
	suuo.mutation.SetUpdatedAt(t)
	return suuo
}

// SetStatus sets the "status" field.
func (suuo *StockUserUpdateOne) SetStatus(u uint8) *StockUserUpdateOne {
	suuo.mutation.ResetStatus()
	suuo.mutation.SetStatus(u)
	return suuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableStatus(u *uint8) *StockUserUpdateOne {
	if u != nil {
		suuo.SetStatus(*u)
	}
	return suuo
}

// AddStatus adds u to the "status" field.
func (suuo *StockUserUpdateOne) AddStatus(u int8) *StockUserUpdateOne {
	suuo.mutation.AddStatus(u)
	return suuo
}

// ClearStatus clears the value of the "status" field.
func (suuo *StockUserUpdateOne) ClearStatus() *StockUserUpdateOne {
	suuo.mutation.ClearStatus()
	return suuo
}

// SetDeletedAt sets the "deleted_at" field.
func (suuo *StockUserUpdateOne) SetDeletedAt(t time.Time) *StockUserUpdateOne {
	suuo.mutation.SetDeletedAt(t)
	return suuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableDeletedAt(t *time.Time) *StockUserUpdateOne {
	if t != nil {
		suuo.SetDeletedAt(*t)
	}
	return suuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suuo *StockUserUpdateOne) ClearDeletedAt() *StockUserUpdateOne {
	suuo.mutation.ClearDeletedAt()
	return suuo
}

// SetUsername sets the "username" field.
func (suuo *StockUserUpdateOne) SetUsername(s string) *StockUserUpdateOne {
	suuo.mutation.SetUsername(s)
	return suuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableUsername(s *string) *StockUserUpdateOne {
	if s != nil {
		suuo.SetUsername(*s)
	}
	return suuo
}

// ClearUsername clears the value of the "username" field.
func (suuo *StockUserUpdateOne) ClearUsername() *StockUserUpdateOne {
	suuo.mutation.ClearUsername()
	return suuo
}

// SetPassword sets the "password" field.
func (suuo *StockUserUpdateOne) SetPassword(s string) *StockUserUpdateOne {
	suuo.mutation.SetPassword(s)
	return suuo
}

// SetNickname sets the "nickname" field.
func (suuo *StockUserUpdateOne) SetNickname(s string) *StockUserUpdateOne {
	suuo.mutation.SetNickname(s)
	return suuo
}

// SetDescription sets the "description" field.
func (suuo *StockUserUpdateOne) SetDescription(s string) *StockUserUpdateOne {
	suuo.mutation.SetDescription(s)
	return suuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableDescription(s *string) *StockUserUpdateOne {
	if s != nil {
		suuo.SetDescription(*s)
	}
	return suuo
}

// ClearDescription clears the value of the "description" field.
func (suuo *StockUserUpdateOne) ClearDescription() *StockUserUpdateOne {
	suuo.mutation.ClearDescription()
	return suuo
}

// SetHomePath sets the "home_path" field.
func (suuo *StockUserUpdateOne) SetHomePath(s string) *StockUserUpdateOne {
	suuo.mutation.SetHomePath(s)
	return suuo
}

// SetNillableHomePath sets the "home_path" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableHomePath(s *string) *StockUserUpdateOne {
	if s != nil {
		suuo.SetHomePath(*s)
	}
	return suuo
}

// SetMobile sets the "mobile" field.
func (suuo *StockUserUpdateOne) SetMobile(s string) *StockUserUpdateOne {
	suuo.mutation.SetMobile(s)
	return suuo
}

// SetNillableMobile sets the "mobile" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableMobile(s *string) *StockUserUpdateOne {
	if s != nil {
		suuo.SetMobile(*s)
	}
	return suuo
}

// ClearMobile clears the value of the "mobile" field.
func (suuo *StockUserUpdateOne) ClearMobile() *StockUserUpdateOne {
	suuo.mutation.ClearMobile()
	return suuo
}

// SetEmail sets the "email" field.
func (suuo *StockUserUpdateOne) SetEmail(s string) *StockUserUpdateOne {
	suuo.mutation.SetEmail(s)
	return suuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableEmail(s *string) *StockUserUpdateOne {
	if s != nil {
		suuo.SetEmail(*s)
	}
	return suuo
}

// ClearEmail clears the value of the "email" field.
func (suuo *StockUserUpdateOne) ClearEmail() *StockUserUpdateOne {
	suuo.mutation.ClearEmail()
	return suuo
}

// SetAvatar sets the "avatar" field.
func (suuo *StockUserUpdateOne) SetAvatar(s string) *StockUserUpdateOne {
	suuo.mutation.SetAvatar(s)
	return suuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableAvatar(s *string) *StockUserUpdateOne {
	if s != nil {
		suuo.SetAvatar(*s)
	}
	return suuo
}

// ClearAvatar clears the value of the "avatar" field.
func (suuo *StockUserUpdateOne) ClearAvatar() *StockUserUpdateOne {
	suuo.mutation.ClearAvatar()
	return suuo
}

// SetLastLoginInfo sets the "last_login_info" field.
func (suuo *StockUserUpdateOne) SetLastLoginInfo(s string) *StockUserUpdateOne {
	suuo.mutation.SetLastLoginInfo(s)
	return suuo
}

// SetNillableLastLoginInfo sets the "last_login_info" field if the given value is not nil.
func (suuo *StockUserUpdateOne) SetNillableLastLoginInfo(s *string) *StockUserUpdateOne {
	if s != nil {
		suuo.SetLastLoginInfo(*s)
	}
	return suuo
}

// ClearLastLoginInfo clears the value of the "last_login_info" field.
func (suuo *StockUserUpdateOne) ClearLastLoginInfo() *StockUserUpdateOne {
	suuo.mutation.ClearLastLoginInfo()
	return suuo
}

// Mutation returns the StockUserMutation object of the builder.
func (suuo *StockUserUpdateOne) Mutation() *StockUserMutation {
	return suuo.mutation
}

// Where appends a list predicates to the StockUserUpdate builder.
func (suuo *StockUserUpdateOne) Where(ps ...predicate.StockUser) *StockUserUpdateOne {
	suuo.mutation.Where(ps...)
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *StockUserUpdateOne) Select(field string, fields ...string) *StockUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated StockUser entity.
func (suuo *StockUserUpdateOne) Save(ctx context.Context) (*StockUser, error) {
	if err := suuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suuo.sqlSave, suuo.mutation, suuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *StockUserUpdateOne) SaveX(ctx context.Context) *StockUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *StockUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *StockUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suuo *StockUserUpdateOne) defaults() error {
	if _, ok := suuo.mutation.UpdatedAt(); !ok {
		if stockuser.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized stockuser.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := stockuser.UpdateDefaultUpdatedAt()
		suuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (suuo *StockUserUpdateOne) sqlSave(ctx context.Context) (_node *StockUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(stockuser.Table, stockuser.Columns, sqlgraph.NewFieldSpec(stockuser.FieldID, field.TypeUUID))
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "StockUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stockuser.FieldID)
		for _, f := range fields {
			if !stockuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stockuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.UpdatedAt(); ok {
		_spec.SetField(stockuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suuo.mutation.Status(); ok {
		_spec.SetField(stockuser.FieldStatus, field.TypeUint8, value)
	}
	if value, ok := suuo.mutation.AddedStatus(); ok {
		_spec.AddField(stockuser.FieldStatus, field.TypeUint8, value)
	}
	if suuo.mutation.StatusCleared() {
		_spec.ClearField(stockuser.FieldStatus, field.TypeUint8)
	}
	if value, ok := suuo.mutation.DeletedAt(); ok {
		_spec.SetField(stockuser.FieldDeletedAt, field.TypeTime, value)
	}
	if suuo.mutation.DeletedAtCleared() {
		_spec.ClearField(stockuser.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suuo.mutation.Username(); ok {
		_spec.SetField(stockuser.FieldUsername, field.TypeString, value)
	}
	if suuo.mutation.UsernameCleared() {
		_spec.ClearField(stockuser.FieldUsername, field.TypeString)
	}
	if value, ok := suuo.mutation.Password(); ok {
		_spec.SetField(stockuser.FieldPassword, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Nickname(); ok {
		_spec.SetField(stockuser.FieldNickname, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Description(); ok {
		_spec.SetField(stockuser.FieldDescription, field.TypeString, value)
	}
	if suuo.mutation.DescriptionCleared() {
		_spec.ClearField(stockuser.FieldDescription, field.TypeString)
	}
	if value, ok := suuo.mutation.HomePath(); ok {
		_spec.SetField(stockuser.FieldHomePath, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Mobile(); ok {
		_spec.SetField(stockuser.FieldMobile, field.TypeString, value)
	}
	if suuo.mutation.MobileCleared() {
		_spec.ClearField(stockuser.FieldMobile, field.TypeString)
	}
	if value, ok := suuo.mutation.Email(); ok {
		_spec.SetField(stockuser.FieldEmail, field.TypeString, value)
	}
	if suuo.mutation.EmailCleared() {
		_spec.ClearField(stockuser.FieldEmail, field.TypeString)
	}
	if value, ok := suuo.mutation.Avatar(); ok {
		_spec.SetField(stockuser.FieldAvatar, field.TypeString, value)
	}
	if suuo.mutation.AvatarCleared() {
		_spec.ClearField(stockuser.FieldAvatar, field.TypeString)
	}
	if value, ok := suuo.mutation.LastLoginInfo(); ok {
		_spec.SetField(stockuser.FieldLastLoginInfo, field.TypeString, value)
	}
	if suuo.mutation.LastLoginInfoCleared() {
		_spec.ClearField(stockuser.FieldLastLoginInfo, field.TypeString)
	}
	_node = &StockUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stockuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suuo.mutation.done = true
	return _node, nil
}
